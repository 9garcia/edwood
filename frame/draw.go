package frame

import (
	"image"

	"9fans.net/go/draw"
)

func (f *Frame) drawtext(pt image.Point, text *draw.Image, back *draw.Image) {
	// log.Println("DrawText at", pt, "NoRedraw", f.NoRedraw, text)
	for _, b := range f.box {
		pt = f.cklinewrap(pt, b)
		// log.Printf("box [%d] %#v pt %v NoRedraw %v nrune %d\n",  nb, string(b.Ptr), pt, f.NoRedraw, b.Nrune)

		if !f.noredraw && b.Nrune >= 0 {
			f.Background.Bytes(pt, text, image.ZP, f.Font.Impl(), b.Ptr)
		}
		pt.X += b.Wid
	}
}

// drawBox is a helpful debugging utility that wraps each box with a
// rectangle to show its extent.
func (f *Frame) drawBox(r image.Rectangle, col, back *draw.Image, qt image.Point) {
	f.Background.Draw(r, col, nil, qt)
	r = r.Inset(1)
	f.Background.Draw(r, back, nil, qt)
}

// DrawSel repaints a section of the frame, delimited by character
// positions p0 and p1, either with plain background or entirely
// highlighted, according to the flag highlighted, managing the tick
// appropriately. The point pt0 is the geometrical location of p0 on the
// screen; like all of the selection-helper routines' Point arguments, it
// must be a value generated by Ptofchar.
//
// Clarification of semantics: the point of this routine is to redraw the
// state of the Frame with selection p0,p1. In particular, this requires
// updating f.p0 and f.p1 so that other entry points (e.g. Insert) can (transparently) remove
// a pre-existing selection.
//
// Note that the original code does not remove the pre-existing selection.
// I (rjk) claim that this is clearly the wrong semantics. This function should
// arrange for the drawn selection on return to be p0, p1
//
// DrawSel does the minimum work needed to clear a highlight and (in particular)
// multiple calls to DrawSel with highlighted false will be cheap.
func (f *Frame) DrawSel(pt image.Point, p0, p1 int, highlighted bool) {
	//  log.Println("Frame DrawSel Start", p0, p1, highlighted, f.P0, f.P1, f.Ticked)
	//  defer log.Println("Frame DrawSel End",  f.P0, f.P1, f.Ticked)
	if p0 > p1 {
		panic("Drawsel0: p0 and p1 must be ordered")
	}

	if f.ticked {
		f.Tick(f.Ptofchar(f.P0), false)
	}

	if f.P0 != f.P1 && f.highlighton {
		// Clear the selection so that subsequent code can
		// update correctly.
		back := f.Cols[ColBack]
		text := f.Cols[ColText]
		f.Drawsel0(f.Ptofchar(f.P0), f.P0, f.P1, back, text)

		// Avoid multiple draws.
		f.highlighton = false
	}

	// We've already done everything necessary above if not
	// highlighting so simply return.
	if !highlighted {
		// This has to be updated here so that select can
		// correctly update the selection during a drag loop.
		f.P0 = p0
		f.P1 = p1
		return
	}

	// If we should just show the tick, do that and return.
	if p0 == p1 {
		f.Tick(pt, highlighted)
		f.Display.Flush() // To show the tick.
		f.P0 = p0
		f.P1 = p1
		return
	}

	// Need to use the highlight colour.
	back := f.Cols[ColHigh]
	text := f.Cols[ColHText]

	f.Drawsel0(pt, p0, p1, back, text)
	f.P0 = p0
	f.P1 = p1
	f.highlighton = true
}

// TODO(rjk): This function is convoluted.
// Drawsel0 is a lower-level routine, taking as arguments a background
// color back and text color text. It assumes that the tick is being
// handled (removed beforehand, replaced afterwards, as required) by its
// caller. The selection is delimited by character positions p0 and p1.
// The point pt0 is the geometrical location of p0 on the screen and must
// be a value generated by Ptofchar.
//
// Commentary: this function should conceivably not be part of the public API
//
// Function does not mutate f.p0, f.p1 (well... actually, it does.)
func (f *Frame) Drawsel0(pt image.Point, p0, p1 int, back *draw.Image, text *draw.Image) image.Point {
	// log.Println("Frame Drawsel0 Start", p0, p1,  f.P0, f.P1)
	// defer log.Println("Frame Drawsel0 End", f.P0, f.P1 )
	p := 0
	trim := false
	x := 0
	var w int

	if p0 > p1 {
		panic("Drawsel0: p0 and p1 must be ordered")
	}

	nb := 0
	for ; nb < len(f.box) && p < p1; nb++ {
		b := f.box[nb]
		nr := nrune(b)
		if p+nr <= p0 {
			// This box doesn't need to be modified.
			p += nr
			continue
		}
		if p >= p0 {
			// Fills in the end of the previous line with selection highlight when the line has
			// has been wrapped.
			qt := pt
			pt = f.cklinewrap(pt, b)
			if pt.Y > qt.Y {
				if qt.X > f.Rect.Max.X {
					qt.X = f.Rect.Max.X
				}
				//f.drawBox(image.Rect(qt.X, qt.Y, f.Rect.Max.X, pt.Y), text, back,qt)
				f.Background.Draw(image.Rect(qt.X, qt.Y, f.Rect.Max.X, pt.Y), back, nil, qt)
			}
		}
		ptr := b.Ptr
		if p < p0 {
			// beginning of region: advance into box
			ptr = ptr[runeindex(ptr, p0-p):]
			nr -= p0 - p
			p = p0
		}
		trim = false
		if p+nr > p1 {
			// end of region: trim box
			nr -= (p + nr) - p1
			trim = true
		}

		if b.Nrune < 0 || nr == b.Nrune {
			w = b.Wid
		} else {
			w = f.Font.BytesWidth(ptr[0:runeindex(ptr, nr)])
		}
		x = pt.X + w
		if x > f.Rect.Max.X {
			x = f.Rect.Max.X
		}
		// f.drawBox(image.Rect(pt.X, pt.Y, x, pt.Y+f.Font.DefaultHeight()), text, back, pt)
		f.Background.Draw(image.Rect(pt.X, pt.Y, x, pt.Y+f.Font.DefaultHeight()), back, nil, pt)
		if b.Nrune >= 0 {
			f.Background.Bytes(pt, text, image.ZP, f.Font.Impl(), ptr[0:runeindex(ptr, nr)])
		}
		pt.X += w
		p += nr
	}

	if p1 > p0 && nb > 0 && nb < len(f.box) && f.box[nb-1].Nrune > 0 && !trim {
		qt := pt
		pt = f.cklinewrap(pt, f.box[nb])
		if pt.Y > qt.Y {
			f.drawBox(image.Rect(qt.X, qt.Y, f.Rect.Max.X, pt.Y), f.Cols[ColHigh], back, qt)
			// f.Background.Draw(image.Rect(qt.X, qt.Y, f.Rect.Max.X, pt.Y), back, nil, qt)
		}
	}

	return pt
}

// This function is not part of the documented libframe entrypoints.
// TODO(rjk): discern purpose of this code.
func (f *Frame) Redraw() {
	//	log.Println("Redraw")
	ticked := false
	var pt image.Point

	if f.P0 == f.P1 {
		ticked = f.ticked
		if ticked {
			f.Tick(f.Ptofchar(f.P0), false)
		}
		f.Drawsel0(f.Ptofchar(0), 0, f.nchars, f.Cols[ColBack], f.Cols[ColText])
		if ticked {
			f.Tick(f.Ptofchar(f.P0), true)
		}
	}

	pt = f.Ptofchar(0)
	pt = f.Drawsel0(pt, 0, f.P0, f.Cols[ColBack], f.Cols[ColText])
	pt = f.Drawsel0(pt, f.P0, f.P1, f.Cols[ColHigh], f.Cols[ColHText])
	pt = f.Drawsel0(pt, f.P1, f.nchars, f.Cols[ColBack], f.Cols[ColText])

}

func (f *Frame) tick(pt image.Point, ticked bool) {
	//	log.Println("_tick")
	if f.ticked == ticked || f.tickimage == nil || !pt.In(f.Rect) {
		return
	}

	pt.X -= f.TickScale
	r := image.Rect(pt.X, pt.Y, pt.X+frtickw*f.TickScale, pt.Y+f.Font.DefaultHeight())

	if r.Max.X > f.Rect.Max.X {
		r.Max.X = f.Rect.Max.X
	}

	if ticked {
		f.tickback.Draw(f.tickback.R, f.Background, nil, pt)
		f.Background.Draw(r, f.Display.Black, f.tickimage, image.ZP) // draws an alpha-blended box
	} else {
		// There is an issue with tick management
		f.Background.Draw(r, f.tickback, nil, image.ZP)
	}
	f.ticked = ticked
}

// Tick draws (if up is non-zero) or removes (if up is zero) the tick
// at the screen position indicated by pt.
//
// Commentary: because this code ignores selections, it is conceivably
// undesirable to use it in the public API.
func (f *Frame) Tick(pt image.Point, ticked bool) {
	if f.TickScale != f.Display.ScaleSize(1) {
		if f.ticked {
			f.tick(pt, false)
		}
		f.InitTick()
	}

	f.tick(pt, ticked)
}

func (f *Frame) _draw(pt image.Point) image.Point {
	// f.LogBoxes("_draw -- start")
	for nb := 0; nb < len(f.box); nb++ {
		b := f.box[nb]
		if b == nil {
			f.Logboxes("-- Frame._draw has invalid box mode --")
			panic("-- Frame._draw has invalid box mode --")
		}
		pt = f.cklinewrap0(pt, b)
		if pt.Y == f.Rect.Max.Y {
			f.nchars -= f.strlen(nb)
			f.delbox(nb, len(f.box)-1)
			break
		}

		if b.Nrune > 0 {
			n, fits := f.canfit(pt, b)
			if !fits {
				break
			}
			if n != b.Nrune {
				f.splitbox(nb, n)
				b = f.box[nb]
			}
			pt.X += b.Wid
		} else {
			if b.Bc == '\n' {
				pt.X = f.Rect.Min.X
				pt.Y += f.Font.DefaultHeight()
			} else {
				pt.X += f.newwid(pt, b)
			}
		}
	}
	// f.LogBoxes("_draw -- end")
	return pt
}

func (f *Frame) strlen(nb int) int {
	n := 0
	for _, b := range f.box[nb:] {
		n += nrune(b)
	}
	return n
}
